@page "/ViewMovie/{IdMovie:int}"
@inject IRepository _repository


<div class="d-flex flex-wrap" style="margin-top:20px;">
    <div class="flex-wrap align-content-center">

        <MudText Align="Align.Center" Typo="Typo.h4">@Movie.Title</MudText>
        <MudCard Elevation="0" Outlined="true" Style="width:1200px; height:520px; margin-left:10px;">
            <div class="d-flex flex-wrap">
                <MudImage Src="@Movie.Cover" Width="350" Height="500" Alt="@Movie.Title" />
                <div class="flex-column" style="width: 800px; height: 500px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">

                    <MudText Typo="Typo.subtitle1">Description: @Movie.Description</MudText>
                    <MudText Typo="Typo.subtitle2">Classification: @Movie?.IdClassificationNavigation?.Name</MudText>
                </div>
            </div>
        </MudCard>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Update" Color="Color.Primary" Href="@($"UpdateMovie/{Movie.IdMovie}")" ButtonType="ButtonType.Submit">Edit</MudButton>
    </div>
</div>


@code {
    [Parameter] public int IdMovie { get; set; }
    public Movies Movie { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _repository.Get<Movies>($"api/Movies/{IdMovie}");
            if (response.Error)
            {
                Console.WriteLine(response.GetBody());
            }
            else if (response.Response != null)
            {
                Movie = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Manejar el error de alguna manera, por ejemplo, mostrar un mensaje de error en la página
        }
    }
}
